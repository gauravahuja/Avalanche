
Avalanche.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  00000416  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  00000416  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001ac  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000599  00000000  00000000  00000642  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000279  00000000  00000000  00000bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000674  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e0  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c0  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	28 c0       	rjmp	.+80     	; 0x52 <__ctors_end>
   2:	42 c0       	rjmp	.+132    	; 0x88 <__bad_interrupt>
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	40 c0       	rjmp	.+128    	; 0x88 <__bad_interrupt>
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	3e c0       	rjmp	.+124    	; 0x88 <__bad_interrupt>
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	3c c0       	rjmp	.+120    	; 0x88 <__bad_interrupt>
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	3a c0       	rjmp	.+116    	; 0x88 <__bad_interrupt>
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	09 c1       	rjmp	.+530    	; 0x22a <__vector_11>
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	36 c0       	rjmp	.+108    	; 0x88 <__bad_interrupt>
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	34 c0       	rjmp	.+104    	; 0x88 <__bad_interrupt>
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	32 c0       	rjmp	.+100    	; 0x88 <__bad_interrupt>
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	da c0       	rjmp	.+436    	; 0x1dc <InterpretMessage+0xf6>
  28:	de c0       	rjmp	.+444    	; 0x1e6 <InterpretMessage+0x100>
  2a:	bb c0       	rjmp	.+374    	; 0x1a2 <InterpretMessage+0xbc>
  2c:	f9 c0       	rjmp	.+498    	; 0x220 <InterpretMessage+0x13a>
  2e:	f8 c0       	rjmp	.+496    	; 0x220 <InterpretMessage+0x13a>
  30:	f7 c0       	rjmp	.+494    	; 0x220 <InterpretMessage+0x13a>
  32:	f6 c0       	rjmp	.+492    	; 0x220 <InterpretMessage+0x13a>
  34:	f5 c0       	rjmp	.+490    	; 0x220 <InterpretMessage+0x13a>
  36:	f4 c0       	rjmp	.+488    	; 0x220 <InterpretMessage+0x13a>
  38:	da c0       	rjmp	.+436    	; 0x1ee <InterpretMessage+0x108>
  3a:	e8 c0       	rjmp	.+464    	; 0x20c <InterpretMessage+0x126>
  3c:	e2 c0       	rjmp	.+452    	; 0x202 <InterpretMessage+0x11c>
  3e:	dc c0       	rjmp	.+440    	; 0x1f8 <InterpretMessage+0x112>
  40:	ea c0       	rjmp	.+468    	; 0x216 <InterpretMessage+0x130>
  42:	ee c0       	rjmp	.+476    	; 0x220 <InterpretMessage+0x13a>
  44:	ed c0       	rjmp	.+474    	; 0x220 <InterpretMessage+0x13a>
  46:	ec c0       	rjmp	.+472    	; 0x220 <InterpretMessage+0x13a>
  48:	eb c0       	rjmp	.+470    	; 0x220 <InterpretMessage+0x13a>
  4a:	ea c0       	rjmp	.+468    	; 0x220 <InterpretMessage+0x13a>
  4c:	92 c0       	rjmp	.+292    	; 0x172 <InterpretMessage+0x8c>
  4e:	a2 c0       	rjmp	.+324    	; 0x194 <InterpretMessage+0xae>
  50:	97 c0       	rjmp	.+302    	; 0x180 <InterpretMessage+0x9a>

00000052 <__ctors_end>:
  52:	11 24       	eor	r1, r1
  54:	1f be       	out	0x3f, r1	; 63
  56:	cf e5       	ldi	r28, 0x5F	; 95
  58:	d4 e0       	ldi	r29, 0x04	; 4
  5a:	de bf       	out	0x3e, r29	; 62
  5c:	cd bf       	out	0x3d, r28	; 61

0000005e <__do_copy_data>:
  5e:	10 e0       	ldi	r17, 0x00	; 0
  60:	a0 e6       	ldi	r26, 0x60	; 96
  62:	b0 e0       	ldi	r27, 0x00	; 0
  64:	e2 ea       	ldi	r30, 0xA2	; 162
  66:	f3 e0       	ldi	r31, 0x03	; 3
  68:	02 c0       	rjmp	.+4      	; 0x6e <.do_copy_data_start>

0000006a <.do_copy_data_loop>:
  6a:	05 90       	lpm	r0, Z+
  6c:	0d 92       	st	X+, r0

0000006e <.do_copy_data_start>:
  6e:	a0 36       	cpi	r26, 0x60	; 96
  70:	b1 07       	cpc	r27, r17
  72:	d9 f7       	brne	.-10     	; 0x6a <.do_copy_data_loop>

00000074 <__do_clear_bss>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 36       	cpi	r26, 0x68	; 104
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	19 d1       	rcall	.+562    	; 0x2b8 <main>
  86:	8b c1       	rjmp	.+790    	; 0x39e <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <Delay1s>:
#include "UART.h"
#include "Timer.h"


void Delay1s()
{
  8a:	80 ed       	ldi	r24, 0xD0	; 208
  8c:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8e:	2a e7       	ldi	r18, 0x7A	; 122
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	f9 01       	movw	r30, r18
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <Delay1s+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9a:	d9 f7       	brne	.-10     	; 0x92 <Delay1s+0x8>
  9c:	80 ed       	ldi	r24, 0xD0	; 208
  9e:	97 e0       	ldi	r25, 0x07	; 7
  a0:	2a e7       	ldi	r18, 0x7A	; 122
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	f9 01       	movw	r30, r18
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <Delay1s+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ac:	d9 f7       	brne	.-10     	; 0xa4 <Delay1s+0x1a>
  ae:	80 ed       	ldi	r24, 0xD0	; 208
  b0:	97 e0       	ldi	r25, 0x07	; 7
  b2:	2a e7       	ldi	r18, 0x7A	; 122
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <Delay1s+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  be:	d9 f7       	brne	.-10     	; 0xb6 <Delay1s+0x2c>
  c0:	80 ed       	ldi	r24, 0xD0	; 208
  c2:	97 e0       	ldi	r25, 0x07	; 7
  c4:	2a e7       	ldi	r18, 0x7A	; 122
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <Delay1s+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d0:	d9 f7       	brne	.-10     	; 0xc8 <Delay1s+0x3e>
  d2:	80 ed       	ldi	r24, 0xD0	; 208
  d4:	97 e0       	ldi	r25, 0x07	; 7
  d6:	2a e7       	ldi	r18, 0x7A	; 122
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	f9 01       	movw	r30, r18
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <Delay1s+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e2:	d9 f7       	brne	.-10     	; 0xda <Delay1s+0x50>
	_delay_ms(200);
	_delay_ms(200);
	_delay_ms(200);
	_delay_ms(200);
	_delay_ms(200);
}
  e4:	08 95       	ret

000000e6 <InterpretMessage>:
char DataByte = 0;
unsigned int Time = 0;

void InterpretMessage()
{
	if(PrevMessage == SetTime)
  e6:	80 91 62 00 	lds	r24, 0x0062
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	b1 f5       	brne	.+108    	; 0x15a <InterpretMessage+0x74>
	{
		DataByte++;
  ee:	80 91 64 00 	lds	r24, 0x0064
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	80 93 64 00 	sts	0x0064, r24
		if(DataByte == 1)
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	39 f4       	brne	.+14     	; 0x10a <InterpretMessage+0x24>
		{
			Time = CurrentMessage;
  fc:	80 91 61 00 	lds	r24, 0x0061
 100:	80 93 65 00 	sts	0x0065, r24
 104:	10 92 66 00 	sts	0x0066, r1
 108:	8d c0       	rjmp	.+282    	; 0x224 <InterpretMessage+0x13e>
		}
		if(DataByte == 2)
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	09 f0       	breq	.+2      	; 0x110 <InterpretMessage+0x2a>
 10e:	8a c0       	rjmp	.+276    	; 0x224 <InterpretMessage+0x13e>
		{
			
			Time = Time*100;
			Time += CurrentMessage;
			Time *= 10;			
 110:	40 91 61 00 	lds	r20, 0x0061
 114:	20 91 65 00 	lds	r18, 0x0065
 118:	30 91 66 00 	lds	r19, 0x0066
 11c:	84 e6       	ldi	r24, 0x64	; 100
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	bc 01       	movw	r22, r24
 122:	26 9f       	mul	r18, r22
 124:	c0 01       	movw	r24, r0
 126:	27 9f       	mul	r18, r23
 128:	90 0d       	add	r25, r0
 12a:	36 9f       	mul	r19, r22
 12c:	90 0d       	add	r25, r0
 12e:	11 24       	eor	r1, r1
 130:	84 0f       	add	r24, r20
 132:	91 1d       	adc	r25, r1
 134:	9c 01       	movw	r18, r24
 136:	53 e0       	ldi	r21, 0x03	; 3
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	5a 95       	dec	r21
 13e:	e1 f7       	brne	.-8      	; 0x138 <InterpretMessage+0x52>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	28 0f       	add	r18, r24
 146:	39 1f       	adc	r19, r25
 148:	30 93 66 00 	sts	0x0066, r19
 14c:	20 93 65 00 	sts	0x0065, r18
			
			PrevMessage = 0;
 150:	10 92 62 00 	sts	0x0062, r1
			DataByte = 0;
 154:	10 92 64 00 	sts	0x0064, r1
 158:	65 c0       	rjmp	.+202    	; 0x224 <InterpretMessage+0x13e>
		}				
	}
	else
	{
		switch(CurrentMessage)
 15a:	80 91 61 00 	lds	r24, 0x0061
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	e6 31       	cpi	r30, 0x16	; 22
 166:	f1 05       	cpc	r31, r1
 168:	08 f0       	brcs	.+2      	; 0x16c <InterpretMessage+0x86>
 16a:	5a c0       	rjmp	.+180    	; 0x220 <InterpretMessage+0x13a>
 16c:	ed 5e       	subi	r30, 0xED	; 237
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	09 94       	ijmp
		{
		case TiltLeft:
			PrevMessage = TiltLeft;
 172:	84 e1       	ldi	r24, 0x14	; 20
 174:	80 93 62 00 	sts	0x0062, r24
			StopTimer1();
 178:	e1 d0       	rcall	.+450    	; 0x33c <StopTimer1>
			OCR1A = 549;
 17a:	85 e2       	ldi	r24, 0x25	; 37
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	06 c0       	rjmp	.+12     	; 0x18c <InterpretMessage+0xa6>
			StartTimer1();
			break;

		case TiltRight:
			PrevMessage = TiltRight;
 180:	86 e1       	ldi	r24, 0x16	; 22
 182:	80 93 62 00 	sts	0x0062, r24
			StopTimer1();
 186:	da d0       	rcall	.+436    	; 0x33c <StopTimer1>
			OCR1A = 854;
 188:	86 e5       	ldi	r24, 0x56	; 86
 18a:	93 e0       	ldi	r25, 0x03	; 3
 18c:	9b bd       	out	0x2b, r25	; 43
 18e:	8a bd       	out	0x2a, r24	; 42
			StartTimer1();
 190:	cf d0       	rcall	.+414    	; 0x330 <StartTimer1>
 192:	48 c0       	rjmp	.+144    	; 0x224 <InterpretMessage+0x13e>
			break;

		case Neutral:
			PrevMessage = Neutral;
 194:	85 e1       	ldi	r24, 0x15	; 21
 196:	80 93 62 00 	sts	0x0062, r24
			StopTimer1();
 19a:	d0 d0       	rcall	.+416    	; 0x33c <StopTimer1>
			OCR1A = 701;
 19c:	8d eb       	ldi	r24, 0xBD	; 189
 19e:	92 e0       	ldi	r25, 0x02	; 2
 1a0:	f5 cf       	rjmp	.-22     	; 0x18c <InterpretMessage+0xa6>
			StartTimer1();
			break;
		
		case StartTimer:

			PrevMessage = CurrentMessage;
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	80 93 62 00 	sts	0x0062, r24
			//LCDClear();
			//LCDWriteStringXY(0,0, "Time Set to (us):");
			//LCDWriteIntXY(0, 1, Time, -1);
			
			Time = Time/10;
			Time = Time*61;
 1a8:	80 91 65 00 	lds	r24, 0x0065
 1ac:	90 91 66 00 	lds	r25, 0x0066
 1b0:	6a e0       	ldi	r22, 0x0A	; 10
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	e0 d0       	rcall	.+448    	; 0x376 <__udivmodhi4>
			Time = Time/10;
 1b6:	8d e3       	ldi	r24, 0x3D	; 61
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	9c 01       	movw	r18, r24
 1bc:	62 9f       	mul	r22, r18
 1be:	c0 01       	movw	r24, r0
 1c0:	63 9f       	mul	r22, r19
 1c2:	90 0d       	add	r25, r0
 1c4:	72 9f       	mul	r23, r18
 1c6:	90 0d       	add	r25, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	6a e0       	ldi	r22, 0x0A	; 10
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	d3 d0       	rcall	.+422    	; 0x376 <__udivmodhi4>
 1d0:	cb 01       	movw	r24, r22
 1d2:	70 93 66 00 	sts	0x0066, r23
 1d6:	60 93 65 00 	sts	0x0065, r22
 1da:	d8 cf       	rjmp	.-80     	; 0x18c <InterpretMessage+0xa6>

			break;

		case StopTimer:

			PrevMessage = CurrentMessage;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 62 00 	sts	0x0062, r24
			StopTimer1();
 1e2:	ac d0       	rcall	.+344    	; 0x33c <StopTimer1>
 1e4:	1f c0       	rjmp	.+62     	; 0x224 <InterpretMessage+0x13e>

			break;

		case SetTime:

			PrevMessage = CurrentMessage;
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	80 93 62 00 	sts	0x0062, r24
 1ec:	1b c0       	rjmp	.+54     	; 0x224 <InterpretMessage+0x13e>
			break;

		case MoveForward:
			
			PrevMessage = CurrentMessage;
 1ee:	8a e0       	ldi	r24, 0x0A	; 10
 1f0:	80 93 62 00 	sts	0x0062, r24

			//LCDClear();
			//LCDWriteStringXY(0,0, "Forward");
			Forward();
 1f4:	70 d0       	rcall	.+224    	; 0x2d6 <Forward>
 1f6:	16 c0       	rjmp	.+44     	; 0x224 <InterpretMessage+0x13e>
			break;
		
		case MoveBackward:
			
			PrevMessage = CurrentMessage;
 1f8:	8d e0       	ldi	r24, 0x0D	; 13
 1fa:	80 93 62 00 	sts	0x0062, r24

			//LCDClear();
			//LCDWriteStringXY(0,0, "Back");
			
			Backward();
 1fe:	72 d0       	rcall	.+228    	; 0x2e4 <Backward>
 200:	11 c0       	rjmp	.+34     	; 0x224 <InterpretMessage+0x13e>
			break;
		
		case MoveLeft:
			
			PrevMessage = CurrentMessage;
 202:	8c e0       	ldi	r24, 0x0C	; 12
 204:	80 93 62 00 	sts	0x0062, r24
			
			//LCDClear();
			//LCDWriteStringXY(0,0, "Left");
			
			TurnLeft();
 208:	74 d0       	rcall	.+232    	; 0x2f2 <TurnLeft>
 20a:	0c c0       	rjmp	.+24     	; 0x224 <InterpretMessage+0x13e>
			break;
		
		case MoveRight:
		
			PrevMessage = CurrentMessage;
 20c:	8b e0       	ldi	r24, 0x0B	; 11
 20e:	80 93 62 00 	sts	0x0062, r24
			
			//LCDClear();
			//LCDWriteStringXY(0,0, "Right");
			
			TurnRight();
 212:	76 d0       	rcall	.+236    	; 0x300 <TurnRight>
 214:	07 c0       	rjmp	.+14     	; 0x224 <InterpretMessage+0x13e>
			break;
		
		case StopMoving:
			
			PrevMessage = CurrentMessage;
 216:	8e e0       	ldi	r24, 0x0E	; 14
 218:	80 93 62 00 	sts	0x0062, r24

			//LCDClear();
			//LCDWriteStringXY(0,0, "Stop");
			
			Stop();
 21c:	78 d0       	rcall	.+240    	; 0x30e <Stop>
 21e:	02 c0       	rjmp	.+4      	; 0x224 <InterpretMessage+0x13e>
			break;
		
		default:
			
			PrevMessage = 0;
 220:	10 92 62 00 	sts	0x0062, r1
			break;		
		}
	}
	CurrentMessage = 0;
 224:	10 92 61 00 	sts	0x0061, r1
}	
 228:	08 95       	ret

0000022a <__vector_11>:


ISR(USART_RXC_vect)
{	
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	4f 93       	push	r20
 23a:	5f 93       	push	r21
 23c:	6f 93       	push	r22
 23e:	7f 93       	push	r23
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	af 93       	push	r26
 246:	bf 93       	push	r27
 248:	ef 93       	push	r30
 24a:	ff 93       	push	r31
	Data = UDR;
 24c:	8c b1       	in	r24, 0x0c	; 12
 24e:	80 93 60 00 	sts	0x0060, r24
	if(Data == EndByte)
 252:	81 36       	cpi	r24, 0x61	; 97
 254:	19 f4       	brne	.+6      	; 0x25c <__vector_11+0x32>
	{
		PushData = 0;
 256:	10 92 63 00 	sts	0x0063, r1
		InterpretMessage();
 25a:	45 df       	rcall	.-374    	; 0xe6 <InterpretMessage>
	}
	if(PushData)
 25c:	80 91 63 00 	lds	r24, 0x0063
 260:	88 23       	and	r24, r24
 262:	21 f0       	breq	.+8      	; 0x26c <__vector_11+0x42>
	{
		CurrentMessage = Data;
 264:	80 91 60 00 	lds	r24, 0x0060
 268:	80 93 61 00 	sts	0x0061, r24
	}
	if(Data == StartByte)
 26c:	80 91 60 00 	lds	r24, 0x0060
 270:	81 34       	cpi	r24, 0x41	; 65
 272:	19 f4       	brne	.+6      	; 0x27a <__vector_11+0x50>
	{
		PushData = 1;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 63 00 	sts	0x0063, r24
	}
}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	7f 91       	pop	r23
 288:	6f 91       	pop	r22
 28a:	5f 91       	pop	r21
 28c:	4f 91       	pop	r20
 28e:	3f 91       	pop	r19
 290:	2f 91       	pop	r18
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <Initialize>:
	_delay_ms(200);
}

int Initialize()
{
	Delay1s();
 29c:	f6 de       	rcall	.-532    	; 0x8a <Delay1s>
	//InitLCD(LS_ULINE);
	//LCDClear();
	InitializeMotors();
 29e:	0f d0       	rcall	.+30     	; 0x2be <InitializeMotors>
	UARTInit();
 2a0:	51 d0       	rcall	.+162    	; 0x344 <UARTInit>
	SetTimer1();
 2a2:	3b d0       	rcall	.+118    	; 0x31a <SetTimer1>
	DDRB |= (1<<PB1);
 2a4:	b9 9a       	sbi	0x17, 1	; 23
	StopTimer1();
 2a6:	4a d0       	rcall	.+148    	; 0x33c <StopTimer1>
	OCR1A = 701;
 2a8:	8d eb       	ldi	r24, 0xBD	; 189
 2aa:	92 e0       	ldi	r25, 0x02	; 2
 2ac:	9b bd       	out	0x2b, r25	; 43
 2ae:	8a bd       	out	0x2a, r24	; 42
	StartTimer1();
 2b0:	3f d0       	rcall	.+126    	; 0x330 <StartTimer1>
	return 1;
}
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	08 95       	ret

000002b8 <main>:

int main()
{
	Initialize();
 2b8:	f1 df       	rcall	.-30     	; 0x29c <Initialize>
	//LCDWriteStringXY(0, 0, "Avalanche...");
	//LCDWriteStringXY(0, 1, "Techfest2k11");
	sei();
 2ba:	78 94       	sei
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <main+0x4>

000002be <InitializeMotors>:

unsigned char Temp;

inline void InitializeMotors()
{
	Temp = DDRD;
 2be:	81 b3       	in	r24, 0x11	; 17
 2c0:	80 93 67 00 	sts	0x0067, r24
	DDRD = Temp | (0b00011110);
 2c4:	8e 61       	ori	r24, 0x1E	; 30
 2c6:	81 bb       	out	0x11, r24	; 17
}
 2c8:	08 95       	ret

000002ca <DeInitializeMotors>:

inline void DeInitializeMotors()
{
	Temp = PORTD;
 2ca:	82 b3       	in	r24, 0x12	; 18
	Temp = Temp & (~(1<<PD1)) & (~(1<<PD2)) & (~(1<<PD3)) & (~(1<<PD4));
 2cc:	81 7e       	andi	r24, 0xE1	; 225
 2ce:	80 93 67 00 	sts	0x0067, r24
	PORTD = Temp;
 2d2:	82 bb       	out	0x12, r24	; 18
}
 2d4:	08 95       	ret

000002d6 <Forward>:

inline void Forward()
{
	//PortD = 0bxxx0101x;
	Temp = PORTD;
 2d6:	82 b3       	in	r24, 0x12	; 18
	Temp = Temp | (1<<PD1) | (1 <<PD3);
	Temp = Temp & (~(1<<PD2)) & (~(1<<PD4));
 2d8:	8a 60       	ori	r24, 0x0A	; 10
 2da:	8b 7e       	andi	r24, 0xEB	; 235
 2dc:	80 93 67 00 	sts	0x0067, r24
	PORTD = Temp;
 2e0:	82 bb       	out	0x12, r24	; 18
}
 2e2:	08 95       	ret

000002e4 <Backward>:
inline void Backward()
{
	//PortD = 0bxxx1010x;
	Temp = PORTD;
 2e4:	82 b3       	in	r24, 0x12	; 18
	Temp = Temp | (1<<PD2) | (1 <<PD4);
	Temp = Temp & (~(1<<PD1)) & (~(1<<PD3));
 2e6:	84 61       	ori	r24, 0x14	; 20
 2e8:	85 7f       	andi	r24, 0xF5	; 245
 2ea:	80 93 67 00 	sts	0x0067, r24
	PORTD = Temp;
 2ee:	82 bb       	out	0x12, r24	; 18
}
 2f0:	08 95       	ret

000002f2 <TurnLeft>:
inline void TurnLeft()
{
	//PortD = 0bxxx1101x;
	Temp = PORTD;
 2f2:	82 b3       	in	r24, 0x12	; 18
	Temp = Temp | (1<<PD1) | (1 <<PD3) | (1 <<PD4);
	Temp = Temp & (~(1<<PD2));
 2f4:	8a 61       	ori	r24, 0x1A	; 26
 2f6:	8b 7f       	andi	r24, 0xFB	; 251
 2f8:	80 93 67 00 	sts	0x0067, r24
	PORTD = Temp;
 2fc:	82 bb       	out	0x12, r24	; 18
}
 2fe:	08 95       	ret

00000300 <TurnRight>:
inline void TurnRight()
{
	//PortD = 0bxxx0111x;
	Temp = PORTD;
 300:	82 b3       	in	r24, 0x12	; 18
	Temp = Temp | (1<<PD1) | (1 <<PD2) | (1 <<PD3);
	Temp = Temp & (~(1<<PD4));
 302:	8e 60       	ori	r24, 0x0E	; 14
 304:	8f 7e       	andi	r24, 0xEF	; 239
 306:	80 93 67 00 	sts	0x0067, r24
	PORTD = Temp;
 30a:	82 bb       	out	0x12, r24	; 18
}
 30c:	08 95       	ret

0000030e <Stop>:

inline void Stop()
{
	//PortD = 0bxxx1111x;
	Temp = PORTD;
 30e:	82 b3       	in	r24, 0x12	; 18
	Temp = Temp | (1<<PD1) | (1 <<PD2) | (1 <<PD3) | (1 <<PD4);
 310:	8e 61       	ori	r24, 0x1E	; 30
 312:	80 93 67 00 	sts	0x0067, r24
	PORTD = Temp;
 316:	82 bb       	out	0x12, r24	; 18
}
 318:	08 95       	ret

0000031a <SetTimer1>:
		Fast PWM
		TOP is IRC1
		Clear OC1A/PD5 on Compare match set OC1A/PD5 at TOP
		Prescaler Not Set
	**/
	TCCR1A = 0x82;
 31a:	82 e8       	ldi	r24, 0x82	; 130
 31c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x18;
 31e:	88 e1       	ldi	r24, 0x18	; 24
 320:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 12288;	//***For 50 hz at CLKio/8, To change
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e3       	ldi	r25, 0x30	; 48
 326:	97 bd       	out	0x27, r25	; 39
 328:	86 bd       	out	0x26, r24	; 38
	TCNT1 = 0;
 32a:	1d bc       	out	0x2d, r1	; 45
 32c:	1c bc       	out	0x2c, r1	; 44
}
 32e:	08 95       	ret

00000330 <StartTimer1>:

inline void StartTimer1()
{
	TCNT1 = 0;
 330:	1d bc       	out	0x2d, r1	; 45
 332:	1c bc       	out	0x2c, r1	; 44
	TCCR1B |= (1<<CS01); //***CLKio/8 To Change
 334:	8e b5       	in	r24, 0x2e	; 46
 336:	82 60       	ori	r24, 0x02	; 2
 338:	8e bd       	out	0x2e, r24	; 46
}
 33a:	08 95       	ret

0000033c <StopTimer1>:

inline void StopTimer1()
{
	TCCR1B &= ~(1<<CS01);	//No Prescaler
 33c:	8e b5       	in	r24, 0x2e	; 46
 33e:	8d 7f       	andi	r24, 0xFD	; 253
 340:	8e bd       	out	0x2e, r24	; 46
}
 342:	08 95       	ret

00000344 <UARTInit>:
#define UART_UBRR ((F_CPU/(UART_BAUD<<4))-1) 

void UARTInit()
{
	//Setting Baud Rate 
	UBRRL = (unsigned char) UART_UBRR; 
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	89 b9       	out	0x09, r24	; 9
	UBRRH = (unsigned char) (UART_UBRR>>8); 
 348:	10 bc       	out	0x20, r1	; 32


	//Enable Receiver 
	UCSRB = (1<<RXEN)|(1<<RXCIE); 
 34a:	80 e9       	ldi	r24, 0x90	; 144
 34c:	8a b9       	out	0x0a, r24	; 10

	//Set Frame Format: 8 data, 1 stop 
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1); //asynchronous, no parity, 1 stop bit, 8 bit size 
 34e:	86 e8       	ldi	r24, 0x86	; 134
 350:	80 bd       	out	0x20, r24	; 32
}
 352:	08 95       	ret

00000354 <UART_Transmit>:

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
 354:	5d 9b       	sbis	0x0b, 5	; 11
 356:	fe cf       	rjmp	.-4      	; 0x354 <UART_Transmit>
	/* Put data into buffer, sends the data */
	UDR = data;
 358:	8c b9       	out	0x0c, r24	; 12
}
 35a:	08 95       	ret

0000035c <UARTWrite>:

void UARTWrite(char str[])
{
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	04 c0       	rjmp	.+8      	; 0x368 <UARTWrite+0xc>
}

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
 360:	5d 9b       	sbis	0x0b, 5	; 11
 362:	fe cf       	rjmp	.-4      	; 0x360 <UARTWrite+0x4>
	/* Put data into buffer, sends the data */
	UDR = data;
 364:	ec b9       	out	0x0c, r30	; 12
{
	unsigned char i = 0;
	while(str[i])
	{
		UART_Transmit(str[i]);
		i++;
 366:	2f 5f       	subi	r18, 0xFF	; 255
}

void UARTWrite(char str[])
{
	unsigned char i = 0;
	while(str[i])
 368:	fc 01       	movw	r30, r24
 36a:	e2 0f       	add	r30, r18
 36c:	f1 1d       	adc	r31, r1
 36e:	e0 81       	ld	r30, Z
 370:	ee 23       	and	r30, r30
 372:	b1 f7       	brne	.-20     	; 0x360 <UARTWrite+0x4>
	{
		UART_Transmit(str[i]);
		i++;
	}
}
 374:	08 95       	ret

00000376 <__udivmodhi4>:
 376:	aa 1b       	sub	r26, r26
 378:	bb 1b       	sub	r27, r27
 37a:	51 e1       	ldi	r21, 0x11	; 17
 37c:	07 c0       	rjmp	.+14     	; 0x38c <__udivmodhi4_ep>

0000037e <__udivmodhi4_loop>:
 37e:	aa 1f       	adc	r26, r26
 380:	bb 1f       	adc	r27, r27
 382:	a6 17       	cp	r26, r22
 384:	b7 07       	cpc	r27, r23
 386:	10 f0       	brcs	.+4      	; 0x38c <__udivmodhi4_ep>
 388:	a6 1b       	sub	r26, r22
 38a:	b7 0b       	sbc	r27, r23

0000038c <__udivmodhi4_ep>:
 38c:	88 1f       	adc	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	5a 95       	dec	r21
 392:	a9 f7       	brne	.-22     	; 0x37e <__udivmodhi4_loop>
 394:	80 95       	com	r24
 396:	90 95       	com	r25
 398:	bc 01       	movw	r22, r24
 39a:	cd 01       	movw	r24, r26
 39c:	08 95       	ret

0000039e <_exit>:
 39e:	f8 94       	cli

000003a0 <__stop_program>:
 3a0:	ff cf       	rjmp	.-2      	; 0x3a0 <__stop_program>
